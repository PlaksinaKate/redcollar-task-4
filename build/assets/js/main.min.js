import{getPosts,getUser,slipPosts}from"./api.min.js";import{POSTS_LIST}from"./contst.min.js";async function posts(){const s=await getPosts();if(slipPosts!==s.total){const t=document.getElementsByClassName(POSTS_LIST)[0];s.posts.forEach((async s=>{const{title:e,body:n,reactions:o,tags:i,userId:a}=s,r=await getUserName(a);let c=`\n                      <div class="posts__item">\n                        <div class="posts__item-tags row">${getTags(i)}</div>\n                        <h2 class="posts__item-title">${e}</h2>\n                        <div class="posts__item-text">${n}</div>\n                        <div class="row space-between">\n                          <div class="posts__item-reactions">\n                            <div class="posts__item-reactions-icon"></div>\n                            <div class="posts__item-reactions-number">${o}</div>\n                          </div>\n                          <div class="posts__item-author">${r}</div>\n                        </div>\n                    </div>`;t.innerHTML+=c}))}}function getTags(s){let t="";return s.forEach((s=>{t+=`<div class="posts__item-tag">${s}</div>`})),t}async function getUserName(s){try{const t=await getUser(s),{maidenName:e,lastName:n}=t;return`${e} ${n}`}catch(s){throw new Error(s)}}const options={root:document.querySelector(POSTS_LIST),rootMargin:"10px",threshold:.25};async function handleIntersect(s,t){s.forEach((s=>{s.isIntersecting&&posts()}))}const observer=new IntersectionObserver(handleIntersect,options),triggerBtn=document.getElementsByClassName("loading")[0];observer.observe(triggerBtn);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5taW4uanMiLCJuYW1lcyI6WyJnZXRQb3N0cyIsImdldFVzZXIiLCJzbGlwUG9zdHMiLCJQT1NUU19MSVNUIiwiYXN5bmMiLCJwb3N0cyIsInRvdGFsIiwicG9zdHNDb250YWluZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJmb3JFYWNoIiwiaXRlbSIsInRpdGxlIiwiYm9keSIsInJlYWN0aW9ucyIsInRhZ3MiLCJ1c2VySWQiLCJ1c2VyTmFtZSIsImdldFVzZXJOYW1lIiwiaHRtbFBvc3QiLCJnZXRUYWdzIiwiaW5uZXJIVE1MIiwiaHRtbFRhZyIsInRhZyIsInVzZXIiLCJtYWlkZW5OYW1lIiwibGFzdE5hbWUiLCJlcnJvciIsIkVycm9yIiwib3B0aW9ucyIsInJvb3QiLCJxdWVyeVNlbGVjdG9yIiwicm9vdE1hcmdpbiIsInRocmVzaG9sZCIsImhhbmRsZUludGVyc2VjdCIsImVudHJpZXMiLCJvYnNlcnZlciIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsInRyaWdnZXJCdG4iLCJvYnNlcnZlIl0sInNvdXJjZXMiOlsibWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRQb3N0cywgZ2V0VXNlciwgc2xpcFBvc3RzIH0gZnJvbSAnLi9hcGkubWluLmpzJ1xuaW1wb3J0IHsgUE9TVFNfTElTVCB9IGZyb20gJy4vY29udHN0Lm1pbi5qcydcblxuXG5hc3luYyBmdW5jdGlvbiBwb3N0cygpIHtcbiAgY29uc3QgcG9zdHMgPSBhd2FpdCBnZXRQb3N0cygpXG4gIGlmIChzbGlwUG9zdHMgIT09IHBvc3RzLnRvdGFsKSB7XG4gICAgY29uc3QgcG9zdHNDb250YWluZXIgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKFBPU1RTX0xJU1QpWzBdO1xuXG4gICAgcG9zdHMucG9zdHMuZm9yRWFjaChhc3luYyAoaXRlbSkgPT4ge1xuICAgICAgY29uc3QgeyB0aXRsZSwgYm9keSwgcmVhY3Rpb25zLCB0YWdzLCB1c2VySWQgfSA9IGl0ZW07XG4gICAgICBjb25zdCB1c2VyTmFtZSA9IGF3YWl0IGdldFVzZXJOYW1lKHVzZXJJZCk7XG5cbiAgICAgIGxldCBodG1sUG9zdCA9IGBcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicG9zdHNfX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3N0c19faXRlbS10YWdzIHJvd1wiPiR7Z2V0VGFncyh0YWdzKX08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz1cInBvc3RzX19pdGVtLXRpdGxlXCI+JHt0aXRsZX08L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBvc3RzX19pdGVtLXRleHRcIj4ke2JvZHl9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IHNwYWNlLWJldHdlZW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBvc3RzX19pdGVtLXJlYWN0aW9uc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3N0c19faXRlbS1yZWFjdGlvbnMtaWNvblwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3N0c19faXRlbS1yZWFjdGlvbnMtbnVtYmVyXCI+JHtyZWFjdGlvbnN9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicG9zdHNfX2l0ZW0tYXV0aG9yXCI+JHt1c2VyTmFtZX08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gO1xuXG4gICAgICBwb3N0c0NvbnRhaW5lci5pbm5lckhUTUwgKz0gaHRtbFBvc3Q7XG4gICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGFncyh0YWdzKSB7XG4gIGxldCBodG1sVGFnID0gJydcbiAgdGFncy5mb3JFYWNoKHRhZyA9PiB7XG4gICAgaHRtbFRhZyArPSBgPGRpdiBjbGFzcz1cInBvc3RzX19pdGVtLXRhZ1wiPiR7dGFnfTwvZGl2PmBcbiAgfSlcblxuICByZXR1cm4gaHRtbFRhZztcbn1cblxuYXN5bmMgZnVuY3Rpb24gZ2V0VXNlck5hbWUodXNlcklkKSB7XG4gIHRyeSB7XG4gICAgY29uc3QgdXNlciA9IGF3YWl0IGdldFVzZXIodXNlcklkKVxuICAgIGNvbnN0IHsgbWFpZGVuTmFtZSwgbGFzdE5hbWUgfSA9IHVzZXJcbiAgICByZXR1cm4gYCR7bWFpZGVuTmFtZX0gJHtsYXN0TmFtZX1gXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGVycm9yKVxuICB9XG59XG5cbmNvbnN0IG9wdGlvbnMgPSB7XG4gIHJvb3Q6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoUE9TVFNfTElTVCksXG4gIHJvb3RNYXJnaW46ICcxMHB4JyxcbiAgdGhyZXNob2xkOiAwLjI1XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGhhbmRsZUludGVyc2VjdChlbnRyaWVzLCBvYnNlcnZlcikge1xuICBlbnRyaWVzLmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgaWYgKGVudHJ5LmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICBwb3N0cygpXG4gICAgfVxuICB9KTtcbn1cblxuY29uc3Qgb2JzZXJ2ZXIgPSBuZXcgSW50ZXJzZWN0aW9uT2JzZXJ2ZXIoaGFuZGxlSW50ZXJzZWN0LCBvcHRpb25zKTtcbmNvbnN0IHRyaWdnZXJCdG4gPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCdsb2FkaW5nJylbMF1cbm9ic2VydmVyLm9ic2VydmUodHJpZ2dlckJ0bik7Il0sIm1hcHBpbmdzIjoiT0FBU0EsU0FBVUMsUUFBU0MsY0FBaUIsc0JBQ3BDQyxlQUFrQixrQkFHM0JDLGVBQWVDLFFBQ2IsTUFBTUEsUUFBY0wsV0FDcEIsR0FBSUUsWUFBY0csRUFBTUMsTUFBTyxDQUM3QixNQUFNQyxFQUFpQkMsU0FBU0MsdUJBQXVCTixZQUFZLEdBRW5FRSxFQUFNQSxNQUFNSyxTQUFRTixNQUFPTyxJQUN6QixNQUFNQyxNQUFFQSxFQUFLQyxLQUFFQSxFQUFJQyxVQUFFQSxFQUFTQyxLQUFFQSxFQUFJQyxPQUFFQSxHQUFXTCxFQUMzQ00sUUFBaUJDLFlBQVlGLEdBRW5DLElBQUlHLEVBQVcsZ0hBRXVDQyxRQUFRTCxtRUFDWkgsaUVBQ0FDLHNSQUlnQkMsd0dBRVpHLHNFQUl0RFYsRUFBZWMsV0FBYUYsQ0FBUSxHQUV4QyxDQUNGLENBRUEsU0FBU0MsUUFBUUwsR0FDZixJQUFJTyxFQUFVLEdBS2QsT0FKQVAsRUFBS0wsU0FBUWEsSUFDWEQsR0FBVyxnQ0FBZ0NDLFNBQUcsSUFHekNELENBQ1QsQ0FFQWxCLGVBQWVjLFlBQVlGLEdBQ3pCLElBQ0UsTUFBTVEsUUFBYXZCLFFBQVFlLElBQ3JCUyxXQUFFQSxFQUFVQyxTQUFFQSxHQUFhRixFQUNqQyxNQUFPLEdBQUdDLEtBQWNDLEdBQzFCLENBQUUsTUFBT0MsR0FDUCxNQUFNLElBQUlDLE1BQU1ELEVBQ2xCLENBQ0YsQ0FFQSxNQUFNRSxRQUFVLENBQ2RDLEtBQU10QixTQUFTdUIsY0FBYzVCLFlBQzdCNkIsV0FBWSxPQUNaQyxVQUFXLEtBR2I3QixlQUFlOEIsZ0JBQWdCQyxFQUFTQyxHQUN0Q0QsRUFBUXpCLFNBQVMyQixJQUNYQSxFQUFNQyxnQkFDUmpDLE9BQ0YsR0FFSixDQUVBLE1BQU0rQixTQUFXLElBQUlHLHFCQUFxQkwsZ0JBQWlCTCxTQUNyRFcsV0FBYWhDLFNBQVNDLHVCQUF1QixXQUFXLEdBQzlEMkIsU0FBU0ssUUFBUUQifQ==
