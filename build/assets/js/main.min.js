import{getPosts,getUser,slipPosts}from"./api.min.js";import{POSTS_LIST}from"./contst.min.js";const postsContainer=document.getElementsByClassName(POSTS_LIST)[0];async function posts(){const t=await getPosts();slipPosts!==t.total&&t.posts.forEach((async t=>{const{userId:s}=t;setPostHTML(t,await getUserName(s))}))}function setPostHTML(t,s){const{title:e,body:n,reactions:o,tags:i}=t,a=document.createElement("div");a.classList.add("posts__item"),a.innerHTML=`<div class="posts__item-tags row">${getTags(i)}</div>\n                        <h2 class="posts__item-title">${e}</h2>\n                        <div class="posts__item-text">${n}</div>\n                        <div class="row space-between">\n                          <div class="posts__item-reactions">\n                            <div class="posts__item-reactions-icon"></div>\n                            <div class="posts__item-reactions-number">${o}</div>\n                          </div>\n                          <div class="posts__item-author">${s}</div>\n                        </div>`,postsContainer.appendChild(a)}function getTags(t){let s="";return t.forEach((t=>{s+=`<div class="posts__item-tag">${t}</div>`})),s}async function getUserName(t){try{const s=await getUser(t),{maidenName:e,lastName:n}=s;return`${e} ${n}`}catch(t){throw new Error(t)}}const options={root:document.querySelector(POSTS_LIST),rootMargin:"10px",threshold:.25};async function handleIntersect(t,s){t.forEach((t=>{t.isIntersecting&&posts()}))}const observer=new IntersectionObserver(handleIntersect,options),triggerBtn=document.getElementsByClassName("loading")[0];observer.observe(triggerBtn);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5taW4uanMiLCJuYW1lcyI6WyJnZXRQb3N0cyIsImdldFVzZXIiLCJzbGlwUG9zdHMiLCJQT1NUU19MSVNUIiwicG9zdHNDb250YWluZXIiLCJkb2N1bWVudCIsImdldEVsZW1lbnRzQnlDbGFzc05hbWUiLCJhc3luYyIsInBvc3RzIiwidG90YWwiLCJmb3JFYWNoIiwiaXRlbSIsInVzZXJJZCIsInNldFBvc3RIVE1MIiwiZ2V0VXNlck5hbWUiLCJ1c2VyTmFtZSIsInRpdGxlIiwiYm9keSIsInJlYWN0aW9ucyIsInRhZ3MiLCJuZXdEaXYiLCJjcmVhdGVFbGVtZW50IiwiY2xhc3NMaXN0IiwiYWRkIiwiaW5uZXJIVE1MIiwiZ2V0VGFncyIsImFwcGVuZENoaWxkIiwiaHRtbFRhZyIsInRhZyIsInVzZXIiLCJtYWlkZW5OYW1lIiwibGFzdE5hbWUiLCJlcnJvciIsIkVycm9yIiwib3B0aW9ucyIsInJvb3QiLCJxdWVyeVNlbGVjdG9yIiwicm9vdE1hcmdpbiIsInRocmVzaG9sZCIsImhhbmRsZUludGVyc2VjdCIsImVudHJpZXMiLCJvYnNlcnZlciIsImVudHJ5IiwiaXNJbnRlcnNlY3RpbmciLCJJbnRlcnNlY3Rpb25PYnNlcnZlciIsInRyaWdnZXJCdG4iLCJvYnNlcnZlIl0sInNvdXJjZXMiOlsibWFpbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBnZXRQb3N0cywgZ2V0VXNlciwgc2xpcFBvc3RzIH0gZnJvbSAnLi9hcGkubWluLmpzJ1xuaW1wb3J0IHsgUE9TVFNfTElTVCB9IGZyb20gJy4vY29udHN0Lm1pbi5qcydcbmNvbnN0IHBvc3RzQ29udGFpbmVyID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShQT1NUU19MSVNUKVswXTtcblxuYXN5bmMgZnVuY3Rpb24gcG9zdHMoKSB7XG4gIGNvbnN0IHBvc3RzID0gYXdhaXQgZ2V0UG9zdHMoKVxuICBpZiAoc2xpcFBvc3RzICE9PSBwb3N0cy50b3RhbCkge1xuXG4gICAgcG9zdHMucG9zdHMuZm9yRWFjaChhc3luYyAoaXRlbSkgPT4ge1xuICAgICAgY29uc3QgeyB1c2VySWQgfSA9IGl0ZW1cbiAgICAgIGNvbnN0IHVzZXJOYW1lID0gYXdhaXQgZ2V0VXNlck5hbWUodXNlcklkKTtcbiAgICAgIHNldFBvc3RIVE1MKGl0ZW0sIHVzZXJOYW1lKVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIHNldFBvc3RIVE1MKGl0ZW0sIHVzZXJOYW1lKSB7XG4gIGNvbnN0IHsgdGl0bGUsIGJvZHksIHJlYWN0aW9ucywgdGFncyB9ID0gaXRlbTtcblxuICBjb25zdCBuZXdEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKVxuICBuZXdEaXYuY2xhc3NMaXN0LmFkZCgncG9zdHNfX2l0ZW0nKVxuICBuZXdEaXYuaW5uZXJIVE1MID0gYDxkaXYgY2xhc3M9XCJwb3N0c19faXRlbS10YWdzIHJvd1wiPiR7Z2V0VGFncyh0YWdzKX08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz1cInBvc3RzX19pdGVtLXRpdGxlXCI+JHt0aXRsZX08L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBvc3RzX19pdGVtLXRleHRcIj4ke2JvZHl9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IHNwYWNlLWJldHdlZW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBvc3RzX19pdGVtLXJlYWN0aW9uc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3N0c19faXRlbS1yZWFjdGlvbnMtaWNvblwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3N0c19faXRlbS1yZWFjdGlvbnMtbnVtYmVyXCI+JHtyZWFjdGlvbnN9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicG9zdHNfX2l0ZW0tYXV0aG9yXCI+JHt1c2VyTmFtZX08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PmBcblxuICBwb3N0c0NvbnRhaW5lci5hcHBlbmRDaGlsZChuZXdEaXYpXG59XG5cbmZ1bmN0aW9uIGdldFRhZ3ModGFncykge1xuICBsZXQgaHRtbFRhZyA9ICcnXG4gIHRhZ3MuZm9yRWFjaCh0YWcgPT4ge1xuICAgIGh0bWxUYWcgKz0gYDxkaXYgY2xhc3M9XCJwb3N0c19faXRlbS10YWdcIj4ke3RhZ308L2Rpdj5gXG4gIH0pXG5cbiAgcmV0dXJuIGh0bWxUYWc7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIGdldFVzZXJOYW1lKHVzZXJJZCkge1xuICB0cnkge1xuICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBnZXRVc2VyKHVzZXJJZClcbiAgICBjb25zdCB7IG1haWRlbk5hbWUsIGxhc3ROYW1lIH0gPSB1c2VyXG4gICAgcmV0dXJuIGAke21haWRlbk5hbWV9ICR7bGFzdE5hbWV9YFxuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcilcbiAgfVxufVxuXG5jb25zdCBvcHRpb25zID0ge1xuICByb290OiBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFBPU1RTX0xJU1QpLFxuICByb290TWFyZ2luOiAnMTBweCcsXG4gIHRocmVzaG9sZDogMC4yNVxufVxuXG5hc3luYyBmdW5jdGlvbiBoYW5kbGVJbnRlcnNlY3QoZW50cmllcywgb2JzZXJ2ZXIpIHtcbiAgZW50cmllcy5mb3JFYWNoKChlbnRyeSkgPT4ge1xuICAgIGlmIChlbnRyeS5pc0ludGVyc2VjdGluZykge1xuICAgICAgcG9zdHMoKVxuICAgIH1cbiAgfSk7XG59XG5cbmNvbnN0IG9ic2VydmVyID0gbmV3IEludGVyc2VjdGlvbk9ic2VydmVyKGhhbmRsZUludGVyc2VjdCwgb3B0aW9ucyk7XG5jb25zdCB0cmlnZ2VyQnRuID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSgnbG9hZGluZycpWzBdXG5vYnNlcnZlci5vYnNlcnZlKHRyaWdnZXJCdG4pOyJdLCJtYXBwaW5ncyI6Ik9BQVNBLFNBQVVDLFFBQVNDLGNBQWlCLHNCQUNwQ0MsZUFBa0Isa0JBQzNCLE1BQU1DLGVBQWlCQyxTQUFTQyx1QkFBdUJILFlBQVksR0FFbkVJLGVBQWVDLFFBQ2IsTUFBTUEsUUFBY1IsV0FDaEJFLFlBQWNNLEVBQU1DLE9BRXRCRCxFQUFNQSxNQUFNRSxTQUFRSCxNQUFPSSxJQUN6QixNQUFNQyxPQUFFQSxHQUFXRCxFQUVuQkUsWUFBWUYsUUFEV0csWUFBWUYsR0FDVCxHQUdoQyxDQUVBLFNBQVNDLFlBQVlGLEVBQU1JLEdBQ3pCLE1BQU1DLE1BQUVBLEVBQUtDLEtBQUVBLEVBQUlDLFVBQUVBLEVBQVNDLEtBQUVBLEdBQVNSLEVBRW5DUyxFQUFTZixTQUFTZ0IsY0FBYyxPQUN0Q0QsRUFBT0UsVUFBVUMsSUFBSSxlQUNyQkgsRUFBT0ksVUFBWSxxQ0FBcUNDLFFBQVFOLG1FQUNWSCxpRUFDQUMsc1JBSWdCQyx3R0FFWkgsMENBRzFEWCxlQUFlc0IsWUFBWU4sRUFDN0IsQ0FFQSxTQUFTSyxRQUFRTixHQUNmLElBQUlRLEVBQVUsR0FLZCxPQUpBUixFQUFLVCxTQUFRa0IsSUFDWEQsR0FBVyxnQ0FBZ0NDLFNBQUcsSUFHekNELENBQ1QsQ0FFQXBCLGVBQWVPLFlBQVlGLEdBQ3pCLElBQ0UsTUFBTWlCLFFBQWE1QixRQUFRVyxJQUNyQmtCLFdBQUVBLEVBQVVDLFNBQUVBLEdBQWFGLEVBQ2pDLE1BQU8sR0FBR0MsS0FBY0MsR0FDMUIsQ0FBRSxNQUFPQyxHQUNQLE1BQU0sSUFBSUMsTUFBTUQsRUFDbEIsQ0FDRixDQUVBLE1BQU1FLFFBQVUsQ0FDZEMsS0FBTTlCLFNBQVMrQixjQUFjakMsWUFDN0JrQyxXQUFZLE9BQ1pDLFVBQVcsS0FHYi9CLGVBQWVnQyxnQkFBZ0JDLEVBQVNDLEdBQ3RDRCxFQUFROUIsU0FBU2dDLElBQ1hBLEVBQU1DLGdCQUNSbkMsT0FDRixHQUVKLENBRUEsTUFBTWlDLFNBQVcsSUFBSUcscUJBQXFCTCxnQkFBaUJMLFNBQ3JEVyxXQUFheEMsU0FBU0MsdUJBQXVCLFdBQVcsR0FDOURtQyxTQUFTSyxRQUFRRCJ9
