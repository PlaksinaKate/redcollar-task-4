import{getPosts,getUser,slipPosts}from"./api.min.js";import{POSTS_LIST}from"./contst.min.js";async function posts(){const s=await getPosts(),t=document.getElementsByClassName(POSTS_LIST)[0];s.posts.forEach((async s=>{const{title:e,body:n,reactions:o,tags:i,userId:r}=s,a=await getUserName(r);let c=`\n                      <div class="posts__item">\n                        <div class="posts__item-tags row">${getTags(i)}</div>\n                        <h2 class="posts__item-title">${e}</h2>\n                        <div class="posts__item-text">${n}</div>\n                        <div class="row space-between">\n                          <div class="posts__item-reactions">\n                            <div class="posts__item-reactions-icon"></div>\n                            <div class="posts__item-reactions-number">${o}</div>\n                          </div>\n                          <div class="posts__item-author">${a}</div>\n                        </div>\n                    </div>`;t.innerHTML+=c}))}function getTags(s){let t="";return s.forEach((s=>{t+=`<div class="posts__item-tag">${s}</div>`})),t}async function getUserName(s){try{const t=await getUser(s),{maidenName:e,lastName:n}=t;return`${e} ${n}`}catch(s){throw new Error(s)}}const options={root:document.querySelector("posts__list"),rootMargin:"10px",threshold:.25};async function handleIntersect(s,t){s.forEach((s=>{s.isIntersecting&&posts()}))}const observer=new IntersectionObserver(handleIntersect,options),triggerBtn=document.getElementsByClassName("loading")[0];observer.observe(triggerBtn);
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFpbi5taW4uanMiLCJuYW1lcyI6WyJnZXRQb3N0cyIsImdldFVzZXIiLCJzbGlwUG9zdHMiLCJQT1NUU19MSVNUIiwiYXN5bmMiLCJwb3N0cyIsInBvc3RzQ29udGFpbmVyIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50c0J5Q2xhc3NOYW1lIiwiZm9yRWFjaCIsIml0ZW0iLCJ0aXRsZSIsImJvZHkiLCJyZWFjdGlvbnMiLCJ0YWdzIiwidXNlcklkIiwidXNlck5hbWUiLCJnZXRVc2VyTmFtZSIsImh0bWxQb3N0IiwiZ2V0VGFncyIsImlubmVySFRNTCIsImh0bWxUYWciLCJ0YWciLCJ1c2VyIiwibWFpZGVuTmFtZSIsImxhc3ROYW1lIiwiZXJyb3IiLCJFcnJvciIsIm9wdGlvbnMiLCJyb290IiwicXVlcnlTZWxlY3RvciIsInJvb3RNYXJnaW4iLCJ0aHJlc2hvbGQiLCJoYW5kbGVJbnRlcnNlY3QiLCJlbnRyaWVzIiwib2JzZXJ2ZXIiLCJlbnRyeSIsImlzSW50ZXJzZWN0aW5nIiwiSW50ZXJzZWN0aW9uT2JzZXJ2ZXIiLCJ0cmlnZ2VyQnRuIiwib2JzZXJ2ZSJdLCJzb3VyY2VzIjpbIm1haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0UG9zdHMsIGdldFVzZXIsIHNsaXBQb3N0cyB9IGZyb20gJy4vYXBpLm1pbi5qcydcbmltcG9ydCB7IFBPU1RTX0xJU1QgfSBmcm9tICcuL2NvbnRzdC5taW4uanMnXG5cblxuYXN5bmMgZnVuY3Rpb24gcG9zdHMoKSB7XG4gIGNvbnN0IHBvc3RzID0gYXdhaXQgZ2V0UG9zdHMoKVxuICBjb25zdCBwb3N0c0NvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoUE9TVFNfTElTVClbMF07XG5cbiAgcG9zdHMucG9zdHMuZm9yRWFjaChhc3luYyAoaXRlbSkgPT4ge1xuICAgIGNvbnN0IHsgdGl0bGUsIGJvZHksIHJlYWN0aW9ucywgdGFncywgdXNlcklkIH0gPSBpdGVtO1xuICAgIGNvbnN0IHVzZXJOYW1lID0gYXdhaXQgZ2V0VXNlck5hbWUodXNlcklkKTtcblxuICAgIGxldCBodG1sUG9zdCA9IGBcbiAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicG9zdHNfX2l0ZW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3N0c19faXRlbS10YWdzIHJvd1wiPiR7Z2V0VGFncyh0YWdzKX08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMiBjbGFzcz1cInBvc3RzX19pdGVtLXRpdGxlXCI+JHt0aXRsZX08L2gyPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBvc3RzX19pdGVtLXRleHRcIj4ke2JvZHl9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicm93IHNwYWNlLWJldHdlZW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cInBvc3RzX19pdGVtLXJlYWN0aW9uc1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3N0c19faXRlbS1yZWFjdGlvbnMtaWNvblwiPjwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJwb3N0c19faXRlbS1yZWFjdGlvbnMtbnVtYmVyXCI+JHtyZWFjdGlvbnN9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicG9zdHNfX2l0ZW0tYXV0aG9yXCI+JHt1c2VyTmFtZX08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5gO1xuXG4gICAgcG9zdHNDb250YWluZXIuaW5uZXJIVE1MICs9IGh0bWxQb3N0O1xuICB9KTtcblxufVxuXG5mdW5jdGlvbiBnZXRUYWdzKHRhZ3MpIHtcbiAgbGV0IGh0bWxUYWcgPSAnJ1xuICB0YWdzLmZvckVhY2godGFnID0+IHtcbiAgICBodG1sVGFnICs9IGA8ZGl2IGNsYXNzPVwicG9zdHNfX2l0ZW0tdGFnXCI+JHt0YWd9PC9kaXY+YFxuICB9KVxuXG4gIHJldHVybiBodG1sVGFnO1xufVxuXG5hc3luYyBmdW5jdGlvbiBnZXRVc2VyTmFtZSh1c2VySWQpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCB1c2VyID0gYXdhaXQgZ2V0VXNlcih1c2VySWQpXG4gICAgY29uc3QgeyBtYWlkZW5OYW1lLCBsYXN0TmFtZSB9ID0gdXNlclxuICAgIHJldHVybiBgJHttYWlkZW5OYW1lfSAke2xhc3ROYW1lfWBcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyb3IpXG4gIH1cbn1cblxuY29uc3Qgb3B0aW9ucyA9IHtcbiAgcm9vdDogZG9jdW1lbnQucXVlcnlTZWxlY3RvcigncG9zdHNfX2xpc3QnKSxcbiAgcm9vdE1hcmdpbjogJzEwcHgnLFxuICB0aHJlc2hvbGQ6IDAuMjVcbn1cblxuYXN5bmMgZnVuY3Rpb24gaGFuZGxlSW50ZXJzZWN0KGVudHJpZXMsIG9ic2VydmVyKSB7XG4gIGVudHJpZXMuZm9yRWFjaCgoZW50cnkpID0+IHtcbiAgICBpZiAoZW50cnkuaXNJbnRlcnNlY3RpbmcpIHtcbiAgICAgIHBvc3RzKClcbiAgICB9XG4gIH0pO1xufVxuXG5jb25zdCBvYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihoYW5kbGVJbnRlcnNlY3QsIG9wdGlvbnMpO1xuY29uc3QgdHJpZ2dlckJ0biA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoJ2xvYWRpbmcnKVswXVxub2JzZXJ2ZXIub2JzZXJ2ZSh0cmlnZ2VyQnRuKTsiXSwibWFwcGluZ3MiOiJPQUFTQSxTQUFVQyxRQUFTQyxjQUFpQixzQkFDcENDLGVBQWtCLGtCQUczQkMsZUFBZUMsUUFDYixNQUFNQSxRQUFjTCxXQUNkTSxFQUFpQkMsU0FBU0MsdUJBQXVCTCxZQUFZLEdBRW5FRSxFQUFNQSxNQUFNSSxTQUFRTCxNQUFPTSxJQUN6QixNQUFNQyxNQUFFQSxFQUFLQyxLQUFFQSxFQUFJQyxVQUFFQSxFQUFTQyxLQUFFQSxFQUFJQyxPQUFFQSxHQUFXTCxFQUMzQ00sUUFBaUJDLFlBQVlGLEdBRW5DLElBQUlHLEVBQVcsZ0hBRXlDQyxRQUFRTCxtRUFDWkgsaUVBQ0FDLHNSQUlnQkMsd0dBRVpHLHNFQUl4RFYsRUFBZWMsV0FBYUYsQ0FBUSxHQUd4QyxDQUVBLFNBQVNDLFFBQVFMLEdBQ2YsSUFBSU8sRUFBVSxHQUtkLE9BSkFQLEVBQUtMLFNBQVFhLElBQ1hELEdBQVcsZ0NBQWdDQyxTQUFHLElBR3pDRCxDQUNULENBRUFqQixlQUFlYSxZQUFZRixHQUN6QixJQUNFLE1BQU1RLFFBQWF0QixRQUFRYyxJQUNyQlMsV0FBRUEsRUFBVUMsU0FBRUEsR0FBYUYsRUFDakMsTUFBTyxHQUFHQyxLQUFjQyxHQUMxQixDQUFFLE1BQU9DLEdBQ1AsTUFBTSxJQUFJQyxNQUFNRCxFQUNsQixDQUNGLENBRUEsTUFBTUUsUUFBVSxDQUNkQyxLQUFNdEIsU0FBU3VCLGNBQWMsZUFDN0JDLFdBQVksT0FDWkMsVUFBVyxLQUdiNUIsZUFBZTZCLGdCQUFnQkMsRUFBU0MsR0FDdENELEVBQVF6QixTQUFTMkIsSUFDWEEsRUFBTUMsZ0JBQ1JoQyxPQUNGLEdBRUosQ0FFQSxNQUFNOEIsU0FBVyxJQUFJRyxxQkFBcUJMLGdCQUFpQkwsU0FDckRXLFdBQWFoQyxTQUFTQyx1QkFBdUIsV0FBVyxHQUM5RDJCLFNBQVNLLFFBQVFEIn0=
